TODOS LOS COMANDOS SE EJECUTAN DESDE LA CARPETA RAIZ o en visual estudio con ctrl+ñ

RUTAS
rutas creadas
routes/web.php
vistas creadas
resources/views
controladores creados
app/Http/Controllers

Las rutas se manejan en 
routes/web.php

para crear y modificar controladores se usa
$ php artisan make:controller NombreController
estando en la carpeta raiz

Para crear vistas (archivos html) se deben crear en
resources/views


BASES DE DATOS CONFIGURACION
Para bases de datos
en el archivo: .env 
agregar los datos de tu base de datos que se usara para el proyecto

MIGRACION DE TABLAS
migraciones creadas
database/migrations

despues para migrar las tablas
usar el comando: php artisan make:migration create_NOMBREDETABLA_table --create=NOMBREDETABLA

en: database/migrations
se creara un archivo y en el debes poner los campos de tu tabla, hacer esto para cada tabla

al terminar de poner todas las tablas
usar el comando: php artisan migrate 
si te equivocaste puedes usar el comando: php artisan migrate:rollback
si modificaste algun campo puedes usar el comando: php artisan migrate:fresh

para agregar columnas a tablas ya existentes 
usar comando: php artisan make:migration add_column_to_NOMBRETABLA --table=NOMBRETABLA

para modificar una columna ya existente
usar comando: php artisan make:migration modify_cvv_camaras_table --table=cvv_camaras



MODELOS ORM
modelos creados
app/Models

Crear modelos ORM de ELOQUENT para tratar cada registro de la tabla como un objeto
usar comando:php artisan make:model TABLA
el nombre del modelo debe ser en singular(sin s) y el de la tabla debe ser plural(con s)
o tambien puedes agregar la linea de codigo protected $table = "NOMBREDETABLA"; en la clase del modelo enseguida de "use HasFactory;"


desde la terminal de visual studio (ctrl+ñ)
usar codigo:
use App\Models\NOMBREMODELO;   para indicar que modelo vas a usar
$NOMBREMODELO = new NOMBREMODELO; para crear un objeto de la clase del modelo, este objeto tendra como propiedados los campos de la tabla correspondiente en la base de datos   
$NOMBREMODELO-> CAMPODELATABLA = "VALOR"; para asignarle el valor al campo de la tabla(en el objeto) 
$NOMBREMODELO->save(); para guardar el registro en la base de datos

tambien puede poner $NOMBREMODELO para ver la informacion del objeto


SEEDERS
sedders creados
database/seeders

usar el comando: php artisan make:seeder NOMBREMODELOORM_seeder
despues de crear el seeder agregar el codigo de los registros que se agregaran ejemplo:
        $marca = new cvv_marca();
        $marca->nombre_marca = "Sony";      
        $marca->save();   

        $marca2 = new cvv_marca();
        $marca2->nombre_marca = "Panasonic";      
        $marca2->save();  

y en el archivo DatabaseSeeder agregar 
$this->call(NOMBREMODELOORM_seeder::class); en el metodo principal para que se ejecute el seeder 
ejecutar seeders con: php artisan db:seed    

tambien puedes borrar todas las tablas y volver a crearlas y ejecutar el seeder al mismo tiempo con el comando:
php artisan migrate:fresh --seed



FACTORY
factorys creados
database/factories

Crear un factory usando el comando:
php artisan make:factory NOMBREDELMODELOOR --model=NOMBREDELMODELOORM

despues en el archivo creado agregar el codigo:
use App\Models\NOMBREDELMODELO;

//DENTRO DE LA CLASE PRINCIPAL
    protected $model = cvv_marca::class;
    public function definition(): array
    {
        return [
            'nombre_marca'=>$this->faker->unique()->company,
        ];
    }

y en el metodo principal del seeder de la tabla
 cvv_marca::factory(10)->create();

y ejecutar el comando: php artisan migrate:fresh --seed para borrar las tablas y crear datos aleatorios con los factory agregados


CREAR CONSULTAS
se hace uso del ORM Eloquent
tienes que hacer uso del del model
estos codigos deben ir principal mente en tus archivos Controller cuando quieras hacer una consulta, insercion, etc.

use App\Models\NOMBREMODELO;

despues tienes que crear un objeto de la clase del modelo

$consultas_NOMBREMODELO = cvv_marca::all();

estro creara un arreglo con el contenido de cada registro en la tabla y para acceder a los registros sólo mandalo a llamar como un arreglo

para consultar un registro de esa misma variable
$consultas_NOMBREMODELO->find($id);

o si sólo quieres hacer una consulta de un unico id

$consulta = MODELO::find($id);   



MUTADORES Y ACCESORES
App\Models\NOMBREMODELO


MUTADORES
Un mutador en Laravel es un método definido en un modelo que te permite modificar el valor de un atributo antes de que se almacene en la base de datos
deben ir en el archivo model, App\Models\NOMBREMODELO
se ponen dentro de la clase

codigo:

    public function setNombreAttribute($value)
    {
        $this->attributes['nombre'] = strtoupper($value); // Convertir el nombre a mayúsculas antes de guardarlo
    }

codigo multiples mutadores:

    public function setAtributosAttribute($value)
    {
        // Modificar atributo1
        $this->attributes['atributo1'] = strtoupper($value);

        // Modificar atributo2
        $this->attributes['atributo2'] = ucfirst($value);

        // Modificar atributo3
        $this->attributes['atributo3'] = strrev($value);
    }

ACCESORES
un accesor es una forma de personalizar la forma en que se accede a los atributos de un modelo.
deben ir en el archivo model, App\Models\NOMBREMODELO

Supongamos que tienes un modelo Usuario con un atributo nombre y quieres obtener el nombre en formato de título (mayúscula la primera letra de cada palabra). Puedes definir un accesor en el modelo de la siguiente manera:

codigo:

public function getNombreAttribute()
{
    return ucwords($this->attributes['nombre']);
}

codigo multiples accesores:

    public function getAtributosAttribute()
    {
        $atributos = [
	    //los 'atributo1,2,3' son los nombres de los campos
            'atributo1' => strtoupper($this->attributes['atributo1']),
            'atributo2' => ucfirst($this->attributes['atributo2']),
            'atributo3' => strrev($this->attributes['atributo3']),
        ];

        return $atributos;
    }


MUTADORES Y ACCESORES 2
En laravel 10 tambien se puede hacer de la siguiente manera

en el modelo agregar "use Illuminate\database\Eloquent\Casts\Attribute;"

y dentro de la funcion poner el codigo con los mutadores y accesores de la siguiente manera

//el nombre de la funcion tiene que ser igual al atributo que se modificara(campo de la tabla)
codigo:

    protected function name(): Attribute
    {
        return new Attribute(
            get: fn($value) => ucwords($value),
            set: fn($value) => strtolower($value),
        );
    }

o bien tambien puede ser:

    protected function name(): Attribute
    {
        return new Attribute(
            get: function($value){
		return ucwords($value);
	    } 
            set: function($value){
		return strtolower($value);
	    }
        );
    }


